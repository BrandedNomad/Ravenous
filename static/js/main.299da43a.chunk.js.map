{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","i","key","id","sortByOptions","SearchBar","term","location","sortBy","handleLocationChange","bind","handleTermChange","handleSearch","sortByOption","setState","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","e","target","value","searchYelp","preventDefault","x","renderSortByOptions","placeholder","onChange","Yelp","search","endPoint","fetch","headers","Authorization","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.299da43a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\n\r\n\r\nclass Business extends React.Component{\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n\r\n        return(\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt=''/>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state}{ this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"BusinessList\">\r\n                {this.props.businesses.map((business,i) => <Business key={business.id} business={business}/>)}\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nvar list;\r\n\r\nconst sortByOptions = {\r\n    'Best Match': 'best_match',\r\n    'Highest Rated': 'rating',\r\n    'Most Reviewed': 'review_count'\r\n};\r\n\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            term:\"\",\r\n            location:\"\",\r\n            sortBy:\"best_match\",\r\n\r\n        };\r\n\r\n        this.handleLocationChange = this.handleLocationChange.bind(this)\r\n        this.handleTermChange = this.handleTermChange.bind(this)\r\n        this.handleSearch = this.handleSearch.bind(this)\r\n\r\n\r\n\r\n    }\r\n    //sets the state of sorBy to the option that is currently active\r\n    handleSortByChange(sortByOption){\r\n        this.setState({\r\n            sortBy:sortByOption\r\n        })\r\n    }\r\n\r\n    //Changes the class attribute based on its state\r\n    getSortByClass(sortByOptions){\r\n        if(this.state.sortBy === sortByOptions){\r\n            return 'active';\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    //creates and returns a list of sort by options to be displayed at the top of the search bar\r\n    renderSortByOptions(){\r\n        return Object.keys(sortByOptions).map(sortByOption =>{\r\n            let sortByOptionValue = sortByOptions[sortByOption];\r\n            return <li className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} key={sortByOptionValue}>{sortByOption}</li>;\r\n        });\r\n\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({\r\n            term:e.target.value\r\n\r\n        })\r\n    }\r\n\r\n    handleLocationChange(e){\r\n        this.setState({\r\n            location:e.target.value\r\n\r\n        })\r\n    }\r\n\r\n    handleSearch(e){\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy)\r\n        e.preventDefault()\r\n    }\r\n\r\n    render(){\r\n\r\n        let x = this.renderSortByOptions()\r\n        return(\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {x}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input placeholder=\"What would you like to eat?\" onChange={this.handleTermChange}/>\r\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange}/>\r\n                </div>\r\n                <div className=\"SearchBar-submit\" onClick={this.handleSearch}>\r\n                    <a>Let's Go</a>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SearchBar;","const clientID = 'gnJdmjz577H6ILTV8dAm4w'\r\n\r\nconst apiKey = 'ex4VnxwQBhzURPLSLFHfGLin5P1_O5dbjDv2cleBMdwY-4Rxc0b1sLvO8Hsc9o1Ywjyq8_JDdBbCWiirZms7QhSGIlmeA1iN1pzV3Mcac_GaUaX746SNypD512knW3Yx'\r\n\r\nlet Yelp = {\r\n    search:(term,location,sortBy)=>{\r\n        const endPoint = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`\r\n        return fetch(endPoint,{\r\n            headers:{\r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        } ).then(response=>{\r\n            if(response.ok){\r\n                return response.json();}\r\n            throw new Error(\"Connection Failed!\")\r\n        },networkError=>{console.log(networkError.message)}).then(jsonResponse=>{\r\n            if(jsonResponse.businesses){\r\n                return jsonResponse.businesses.map(business=>{\r\n                    return  {\r\n                        id: business.id,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count\r\n                    };\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n};\r\n\r\n// function search(term,location,sortBy){\r\n//     const endPoint = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`\r\n//     return fetch(endPoint,{\r\n//         headers:{\r\n//             Authorization: `Bearer ${apiKey}`\r\n//         }\r\n//     } ).then(response=>{\r\n//         return response.json()\r\n//     }).then(jsonResponse=>{\r\n//         if(jsonResponse.businesses){\r\n//             return jsonResponse.businesses.map(business=>{\r\n//                 return  {\r\n//                     id: business.id,\r\n//                     imageSrc: business.image_url,\r\n//                     name: business.name,\r\n//                     address: business.location.address1,\r\n//                     city: business.location.city,\r\n//                     state: business.location.state,\r\n//                     zipCode: business.location.zip_code,\r\n//                     category: business.categories[0].title,\r\n//                     rating: business.rating,\r\n//                     reviewCount: business.review_count\r\n//                 };\r\n//             })\r\n//         }\r\n//     })\r\n// }\r\n\r\nexport default Yelp;","import React from 'react';\n\nimport './App.css';\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Yelp from '../../util/Yelp.js'\n\n\n\n//const businesses = [business,business,business,business,business,business];\n\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            businesses:[]\n        }\n\n        this.searchYelp = this.searchYelp.bind(this)\n    }\n\n\n\n    searchYelp(term,location,sortBy){\n        Yelp.search(term,location,sortBy).then(businesses=>{\n            this.setState({\n                businesses:businesses\n            })\n        })\n    }\n\n    render(){\n    return(\n        <div id=\"app\">\n            <h1>ravenous</h1>\n            <SearchBar searchYelp = {this.searchYelp}/>\n            <BusinessList businesses={this.state.businesses}/>\n        </div>\n    )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}